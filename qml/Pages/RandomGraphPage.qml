import QtQuick 2.15
import QtQuick.Controls 2.15 // HorizontalHeaderView
import QtQuick 2.12  //tableview
import QtQuick.Layouts 1.3
import QtQuick.Dialogs 1.3
import QtQml.Models 2.2
import QtQuick.Shapes 1.12
import QtQuick.Controls.Material 2.12

import AppCore 1.0
import RandomModel 1.0
import Base 1.0

BasePage{
    id:randomGraphPage
    title: "Random graph"
    visible: false
    onButtonClicked: {
        stackView.pop(mainPage);
    }
    Rectangle{
        id: rect
        width: parent.width / 1.5
        height: parent.height / 1.5
        anchors.centerIn: parent
        TableView{
            id: tableview
            property int startRow: -1
            property int startColumn: -1
            property int finishRow: -1
            property int finishColumn: -1
            property ListModel highlightedCells: ListModel {
                // Define the properties of the model
                ListElement { row: -1; column: -1 }
            }
            anchors.fill: parent
            model: randomModel
            boundsBehavior: Flickable.StopAtBounds
            interactive: false
            delegate: Rectangle{
                id: cell
                implicitWidth: rect.width / (randomModel.columnCount() + 1)
                implicitHeight: rect.height / (randomModel.rowCount() + 1)
                border.width: 1
                border.color: "blue"
                color:{
                        for (var i = 0; i < tableview.highlightedCells.count; i++) {
                            if (tableview.highlightedCells.get(i).row === row && tableview.highlightedCells.get(i).column === column) {
                                return "skyblue";
                            }
                        }
                    return (emptyNode === true) ? "black" :
                    (row === tableview.startRow && column === tableview.startColumn)? "green":
                    (row === tableview.finishRow && column === tableview.finishColumn)? "red":"pink"
                }
                MouseArea{
                    id:mouseArea
                    acceptedButtons: Qt.LeftButton | Qt.RightButton
                    anchors.fill: parent
                    onClicked: {
                        if (mouse.button === Qt.RightButton && !(row === tableview.finishRow & column === tableview.finishColumn)) {

                            tableview.finishRow = row
                            tableview.finishColumn = column
                            if (tableview.highlightedCells.count > 0) { tableview.highlightedCells.clear() }
                        }
                        else{
                            if(!(row === tableview.startRow & column === tableview.startColumn)){
                                tableview.startRow = row
                                tableview.startColumn = column
                                if (tableview.highlightedCells.count > 0) { tableview.highlightedCells.clear() }
                            }
                        }
                    }
                }
            }
        }
    }
    Text{
        width: 200
        anchors.bottom: rect.top
        anchors.left: rect.left
        anchors.bottomMargin: middleMargin
        font.pixelSize: fontSize
        text: "Left mouse press -- choose start node. Right -- finsh "
        color: "white"
    }
    Button{
        id: startAlg
        text: "start algorithm"
        anchors.left: rect.right
        anchors.top: rect.top
        anchors.leftMargin: defMargin
        onClicked: {
            if(tableview.highlightedCells.count === 0){
                if (tableview.startColumn !== -1 && tableview.finishColumn !== -1) {
                    var minPathCoordinates = appCore.startAlgorithmWithAutogeneratedGraph(
                                tableview.startColumn,
                                tableview.startRow,
                                tableview.finishColumn,
                                tableview.finishRow
                                );
                    for (var i = 0; i < minPathCoordinates.length; i += 2) {
                        var x = parseInt(minPathCoordinates[i]);
                        var y = parseInt(minPathCoordinates[i + 1]);

                        console.warn("x[", i, "]=",x)
                        console.warn("y[", i, "]=",y)
                        tableview.highlightedCells.append({ row: x, column: y});
                    }
                }
                else{

                    messageDialog.text = "Clear map"
                    messageDialog.visible = true
                }
            }
        }
    }

    Button{
        id: clear
        text: "clear map"
        anchors.top: startAlg.bottom
        anchors.left: startAlg.left
        anchors.topMargin: defMargin
        onClicked:{
            tableview.highlightedCells.clear()
            tableview.startRow =  -1
            tableview.startColumn = -1
            tableview.finishRow = -1
            tableview.finishColumn = -1

        }

    }

    DialogItem {
        id: messageDialog
        visible: false
        buttons: ['Ok']
        dialog_width: parent.width
        dialog_height: parent.height
        color: "grey"
        anchors.centerIn: parent
        onClicked: visible = false
    }
}
