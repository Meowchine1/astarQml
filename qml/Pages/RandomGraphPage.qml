import QtQuick 2.15
import QtQuick.Controls 2.15 // HorizontalHeaderView
import QtQuick 2.12  //tableview
import QtQuick.Layouts 1.3
import QtQuick.Dialogs 1.3
import QtQml.Models 2.2
import QtQuick.Shapes 1.12
import QtQuick.Controls.Material 2.12
import org.kde.kirigami 2.9 as Kirigami


import AppCore 1.0
import RandomModel 1.0
import Base 1.0

BasePage{
    id:randomGraphPage
    title: "Random graph"
    visible: false
    onButtonClicked: {
        stackView.pop(mainPage);
    }
    Rectangle{
        id: rect
        width: parent.width / 1.5
        height: parent.height / 1.5
        anchors.centerIn: parent
        TableView{
            id: tableview
            property int startRow: -1
            property int startColumn: -1
            property int finishRow: -1
            property int finishColumn: -1
            property ListModel highlightedCells: ListModel {}
            anchors.fill: parent
            model: randomModel
            interactive: false
            delegate: Rectangle{
                id: cell
                implicitWidth: rect.width / (randomModel.columnCount())
                implicitHeight: rect.height / (randomModel.rowCount())
                border.width: 1
                border.color: "blue"
                color:{
                    for (var i = 0; i < tableview.highlightedCells.count; i++) {
                        if (tableview.highlightedCells.get(i).row === row && tableview.highlightedCells.get(i).column === column) {
                            return "skyblue";
                        }
                    }
                    return (emptyNode === true) ? "black" :
                                                  (row === tableview.startRow && column === tableview.startColumn)? "green":
                                                                                                                    (row === tableview.finishRow && column === tableview.finishColumn)? "red":"pink"
                }
                MouseArea{
                    id:mouseArea
                    acceptedButtons: Qt.LeftButton | Qt.RightButton
                    anchors.fill: parent
                    onClicked: {
                        if(row.color !== "black"){
                            if ( mouse.button === Qt.RightButton && !(row === tableview.finishRow & column === tableview.finishColumn)) {

                                tableview.finishRow = row
                                tableview.finishColumn = column
                                if (tableview.highlightedCells.count > 0) { tableview.highlightedCells.clear() }
                            }
                            else{
                                if(!(row === tableview.startRow & column === tableview.startColumn)){
                                    tableview.startRow = row
                                    tableview.startColumn = column
                                    if (tableview.highlightedCells.count > 0) { tableview.highlightedCells.clear() }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    Text{
        width: 200
        anchors.bottom: rect.top
        anchors.left: rect.left
        anchors.bottomMargin: middleMargin
        font.pixelSize: fontSize
        text: "Left mouse press -- choose start node. Right -- finsh. Green cell - start, red - finish "
        color: "white"
    }
    Button{
        id: startAlg
        text: "start algorithm"
        anchors.left: rect.right
        anchors.top: rect.top
        anchors.leftMargin: defMargin
        onClicked: {
            if(tableview.highlightedCells.count === 0){
                if (tableview.startColumn !== -1 && tableview.finishColumn !== -1) {
                    var minPathCoordinates = appCore.startAlgorithmWithAutogeneratedGraph(
                                tableview.startColumn,
                                tableview.startRow,
                                tableview.finishColumn,
                                tableview.finishRow
                                );
                    for (var i = 0; i < minPathCoordinates.length; i += 2) {
                        var x = parseInt(minPathCoordinates[i]);
                        var y = parseInt(minPathCoordinates[i + 1]);

                        console.warn("x[", i, "]=",x)
                        console.warn("y[", i, "]=",y)
                        tableview.highlightedCells.append({ row: x, column: y});
                    }
                }
                else{
                    // messageDialog.text = "Choose start and finish nodes"
                    messageDialog.open()
                }
            }
            else{
                messageDialog.text = "Clear map"
                messageDialog.visible = true
            }
        }
    }
    Button{
        id: clear
        text: "clear map"
        anchors.top: startAlg.bottom
        anchors.left: startAlg.left
        anchors.topMargin: defMargin
        onClicked:{
            tableview.highlightedCells.clear()
            tableview.startRow =  -1
            tableview.startColumn = -1
            tableview.finishRow = -1
            tableview.finishColumn = -1

        }

    }
    Button{
        id: resetGraph
        text: "reset graph"
        anchors.top: clear.bottom
        anchors.left: clear.left
        anchors.topMargin: defMargin
        onClicked:{
            randomModel.resetGraph();
        }
    }

    Dialog {
        id: messageDialog
        title: "Test dialog title"
        width: win.width / 3
        height: win.height / 4
        standardButtons: Dialog.Ok

        contentItem: Item{
            Rectangle{
                id: border
                radius: 5
                border.color: "grey"
                border.width: 2
                width: messageDialog.width * 0.9
                height: messageDialog.height * 0.9
                color: Kirigami.Theme.backgroundColor
                anchors.centerIn: parent
                anchors.margins: defMargin
                Text {
                    text: "Helloesasdx!"
                    anchors.left: border.left
                    anchors.top: border.top
                    anchors.margins: defMargin
                }

                Rectangle {
                    id: dividerHorizontal
                    color: "grey"
                    width: border.width
                    height: 2 // Устанавливаем ширину в два пикселя
                    anchors.left: border.left
                    anchors.bottom: button.top
                    anchors.bottomMargin: defMargin
                }

                Rectangle{
                    id: button
                    width: border.width * 0.3
                    height: border.height * 0.2
                    anchors.bottom: border.bottom
                    anchors.bottomMargin: defMargin
                    anchors.horizontalCenter: border.horizontalCenter
                    border.width: 2
                    border.color: "grey"
                    radius: 5
                    RowLayout{
                        anchors.centerIn: button
                        Image {
                            source: "qrc:resourses/ok.png"
                        }
                        Text {
                            text: "Ok"
                        }
                    }
                    MouseArea{
                        anchors.fill: button
                        onClicked: messageDialog.accept()
                    }
                }
            }
        }
        onAccepted: {
            console.warn("Ok button clicked " + messageDialog.result);
        }
    }
}
