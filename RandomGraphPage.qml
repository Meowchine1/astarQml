import QtQuick 2.15
import QtQuick.Controls 2.15 // HorizontalHeaderView
import QtQuick 2.12  //tableview
import QtQuick.Layouts 1.3
import QtQuick.Dialogs 1.3
import QtQml.Models 2.2
import QtQuick.Shapes 1.12
import QtQuick.Controls.Material 2.12

import AppCore 1.0
import RandomModel 1.0

BasePage{
    id:randomGraphPage
    title: "Random graph"
    visible: false
    onButtonClicked: {
        stackView.pop(mainPage);
    }
    Rectangle{
        id: rect
        width: parent.width / 1.5
        height: parent.height / 1.5
        anchors.centerIn: parent
        TableView{
            id: tableview
            property int startRow: -1
            property int startColumn: -1
            property int finishRow: -1
            property int finishColumn: -1
            property variant highlightedCells: []

            anchors.fill: parent
            model: randomModel
            boundsBehavior: Flickable.StopAtBounds
            interactive: false
            delegate: Rectangle{
                id: cell
                implicitWidth: rect.width / (randomModel.columnCount() + 1)
                implicitHeight: rect.height / (randomModel.rowCount() + 1)
                border.width: 1
                border.color: "blue"
                color:{
                    for (var i = 0; i < tableview.highlightedCells.length; i++) {
                        console.warn("i am here")
                        if (tableview.highlightedCells[i].row === row && tableview.highlightedCells[i].column === column) {
                            return "blue";
                        }
                    }
                    return (emptyNode === true) ? "black" :
                (row === tableview.startRow && column === tableview.startColumn)? "green":
                (row === tableview.finishRow && column === tableview.finishColumn)? "red":
                 "pink"
                }
                    MouseArea{
                    id:mouseArea
                    acceptedButtons: Qt.LeftButton | Qt.RightButton
                    anchors.fill: parent
                    onClicked: {
                        if (mouse.button === Qt.RightButton) {

                            tableview.finishRow = row
                            tableview.finishColumn = column
                        }
                        else{
                            tableview.startRow = row
                            tableview.startColumn = column
                        }
                    }
                }
            }
        }
    }
    Text{
        width: 200
        anchors.bottom: rect.top
        anchors.left: rect.left
        anchors.bottomMargin: middleMargin
        font.pixelSize: fontSize
        text: "Left mouse press -- choose start node. Right -- finsh "
           color: "white"
    }
    Button{
        id: startAlg
        text:"start algorithm"
        anchors.bottom: rect.top
        anchors.right: rect.right
        anchors.bottomMargin: defMargin
        onClicked: {
            if(tableview.startColumn !== -1 &&
                    tableview.finishColumn !== -1){
                //tableview.forceLayout()
                var minPathCoordinates = appCore.startAlgorithmWithAutogeneratedGraph(
                            tableview.startColumn,
                            tableview.startRow,
                            tableview.finishColumn,
                            tableview.finishRow)
                for(var i = 0; i < minPathCoordinates.length; i+=2){
                    var x = parseInt(minPathCoordinates[i])
                    var y = parseInt(minPathCoordinates[i+1])
                     tableview.highlightedCells.push({ row: y, column: x });
                     console.warn(tableview.highlightedCells.length)
                }
            }
        }
    }
}
